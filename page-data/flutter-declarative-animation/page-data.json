{"componentChunkName":"component---src-templates-post-tsx","path":"/flutter-declarative-animation/","webpackCompilationHash":"dafa8253ef1a83511e31","result":{"data":{"site":{"siteMetadata":{"title":"Clarke Swiedler"}},"markdownRemark":{"id":"91ef11e0-1958-5332-9429-563e347294f5","excerpt":"This article will go over methods of animating Flutter widgets based on state, with some solutions to make it a little more straightforward. The Short of It If you know what you’re looking for, are familiar with Flutter animations and Widget lifecycles, and just want to know how to trigger animations based on state changes without reading a whole article, the answer is that you need to override the  method in . Here’s a quick example, followed by some discussion on Flutter animations and generalized solutions. We will go into much greater detail about below. The Long of It Flutter’s declarative programming style works extremely well for building a UI and populating it with data, allowing changes in the data state to update the UI state automatically. It’s very easy to tell the framework that, in terms of the UI, you would like something to be different based on the state. However it is less straightforward to tell the framework that you would like something to happen based on the state. As an example, let’s say we’re using a , and we want different widgets to be visible based on the state of the stream. If the stream has no data, a widget with a loading indicator should slide into view, and, importantly, should slide back out of view when the stream has data. The common way to handle loading states for streams is something like the following: This will cause the screen to transition completely between one widget and the other when the status of the snapshot data changes. However, let’s say that we actually want to have the Loading widget sit on top of the DataWidget when the stream has no data, either because the DataWidget still has some interactivity even when it doesn’t have stream data, or because we just like the look of a floating progress indicator. We might do something like this: Okay, so now our LoadingWidget sits on top of the DataWidget when the stream has no data, but rather than just appearing on top, we want it to slide in from the top of the screen. There are several ways to do this, but the most straightforward might be to use either a  widget, or an  widget. Both have some drawbacks in this scenario. The  widget requires that it be provided with an , which must be checked and controlled from somewhere within the  method. This introduces a lot of extra code and, more importantly, our  method is suddenly beset by a big block of imperative code nestled uncomfortably amist all of our nice declarative UI code. It only gets worse if there are…","html":"<p>This article will go over methods of animating Flutter widgets based on state, with some solutions to make it a little more straightforward.</p>\n<h2 id=\"the-short-of-it\"><a href=\"#the-short-of-it\" aria-label=\"the short of it permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Short of It</h2>\n<p>If you know what you’re looking for, are familiar with Flutter animations and Widget lifecycles, and just want to know how to trigger animations based on state changes without reading a whole article, the answer is that you need to override the <code class=\"language-text\">didUpdateWidget</code> method in <code class=\"language-text\">State&lt;StatefulWidget&gt;</code>. Here’s a quick example, followed by some discussion on Flutter animations and generalized solutions.</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">//An Widget that animates visiblity based on a \"visible\" property.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyWidget</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StatefulWidget</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> bool visible<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">MyWidget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token metadata symbol\">@required</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>visible<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  _MyWidgetState <span class=\"token function\">createState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">_MyWidgetState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_MyWidgetState</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">State</span><span class=\"token operator\">&lt;</span>MyWidget<span class=\"token operator\">></span> <span class=\"token keyword\">with</span> SingleTickerProviderStateMixin <span class=\"token punctuation\">{</span>\n  AnimationController _controller<span class=\"token punctuation\">;</span>\n  Animation _animation<span class=\"token punctuation\">;</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">initState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">initState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*Your setup logic for _controller and _animation*/</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//Here's the important bit</span>\n  <span class=\"token comment\">//This method is called whenever the StatefulWidget is called with different properties</span>\n  <span class=\"token metadata symbol\">@override</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">didUpdateWidget</span><span class=\"token punctuation\">(</span>MyWidget oldWidget<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">didUpdateWidget</span><span class=\"token punctuation\">(</span>oldWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>widget<span class=\"token punctuation\">.</span>visible <span class=\"token operator\">!=</span> oldWidget<span class=\"token punctuation\">.</span>visible<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>widget<span class=\"token punctuation\">.</span>visible<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        _controller<span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        _controller<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  Widget <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>BuildContext context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/*Your widget that has some property that depends on the _animation*/</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We will go into much greater detail about below.</p>\n<h2 id=\"the-long-of-it\"><a href=\"#the-long-of-it\" aria-label=\"the long of it permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Long of It</h2>\n<p>Flutter’s declarative programming style works extremely well for building a UI and populating it with data, allowing changes in the data state to update the UI state automatically. It’s very easy to tell the framework that, in terms of the UI, you would like something to <em>be different</em> based on the state. However it is less straightforward to tell the framework that you would like something to <strong>happen</strong> based on the state.</p>\n<p>As an example, let’s say we’re using a <code class=\"language-text\">StreamBuilder</code>, and we want different widgets to be visible based on the state of the stream. If the stream has no data, a widget with a loading indicator should slide into view, and, importantly, should slide back out of view when the stream has data.</p>\n<p>The common way to handle loading states for streams is something like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">Widget <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">StreamBuilder</span><span class=\"token punctuation\">(</span>\n    stream<span class=\"token punctuation\">:</span> _dataStream<span class=\"token punctuation\">,</span>\n    builder<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> snapshot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>snapshot<span class=\"token punctuation\">.</span>hasData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">LoadingWidget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">DataWidget</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">:</span> snapshot<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will cause the screen to transition completely between one widget and the other when the status of the snapshot data changes. However, let’s say that we actually want to have the Loading widget sit on top of the DataWidget when the stream has no data, either because the DataWidget still has some interactivity even when it doesn’t have stream data, or because we just like the look of a floating progress indicator. We might do something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">Widget <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">StreamBuilder</span><span class=\"token punctuation\">(</span>\n    stream<span class=\"token punctuation\">:</span> _dataStream<span class=\"token punctuation\">,</span>\n    builder<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> snapshot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>Widget<span class=\"token operator\">></span><span class=\"token punctuation\">[</span>\n        <span class=\"token comment\">//Here we assume the DataWidget can handle a null value</span>\n        <span class=\"token function\">DataWidget</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">:</span> snapshot<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>snapshot<span class=\"token punctuation\">.</span>hasData<span class=\"token punctuation\">)</span> <span class=\"token function\">LoadingWidget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Okay, so now our LoadingWidget sits on top of the DataWidget when the stream has no data, but rather than just appearing on top, we want it to slide in from the top of the screen. There are several ways to do this, but the most straightforward might be to use either a <code class=\"language-text\">SlideTransition</code> widget, or an <code class=\"language-text\">AnimatedPositioned</code> widget. Both have some drawbacks in this scenario.</p>\n<p>The <code class=\"language-text\">SlideTransition</code> widget requires that it be provided with an <code class=\"language-text\">AnimationController</code>, which must be checked and controlled from somewhere within the <code class=\"language-text\">build</code> method.</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ParentWidget</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StatefulWidget</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">createState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">ParentWidgetState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ParentWidgetState</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">State</span><span class=\"token operator\">&lt;</span>ParentWidget<span class=\"token operator\">></span>\n  <span class=\"token keyword\">with</span> SingleTickerProviderStateMixin <span class=\"token punctuation\">{</span>\n\n  AnimationController _controller<span class=\"token punctuation\">;</span>\n  Animation _slideAnimation<span class=\"token punctuation\">;</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  <span class=\"token function\">initState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">initState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _controller <span class=\"token operator\">=</span> <span class=\"token function\">AnimationController</span><span class=\"token punctuation\">(</span>vsync<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> duration<span class=\"token punctuation\">:</span> <span class=\"token function\">Duration</span><span class=\"token punctuation\">(</span>milliseconds<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _slideAnimation <span class=\"token operator\">=</span> Tween<span class=\"token operator\">&lt;</span>Offset<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">:</span> <span class=\"token function\">Offset</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">:</span> <span class=\"token function\">Offset</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>_controller<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  Widget <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>BuildContext context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">StreamBuilder</span><span class=\"token punctuation\">(</span>\n      stream<span class=\"token punctuation\">:</span> _dataStream<span class=\"token punctuation\">,</span>\n      builder<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> snapshot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>snapshot<span class=\"token punctuation\">.</span>hasData <span class=\"token operator\">&amp;&amp;</span> _controller<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> AnimationStatus<span class=\"token punctuation\">.</span>dismissed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          _controller<span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>snapshot<span class=\"token punctuation\">.</span>hasData <span class=\"token operator\">&amp;&amp;</span> _controller<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> AnimationStatus<span class=\"token punctuation\">.</span>completed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          _controller<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>Widget<span class=\"token operator\">></span><span class=\"token punctuation\">[</span>\n          <span class=\"token function\">DataWidget</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">:</span> snapshot<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function\">SlideTransition</span><span class=\"token punctuation\">(</span>\n            position<span class=\"token punctuation\">:</span> _slideAnimation<span class=\"token punctuation\">,</span>\n            child<span class=\"token punctuation\">:</span> <span class=\"token function\">LoadingWidget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This introduces a lot of extra code and, more importantly, our <code class=\"language-text\">build</code> method is suddenly beset by a big block of imperative code nestled uncomfortably amist all of our nice declarative UI code. It only gets worse if there are several overlay widgets that are animated based on various aspects of the stream state.</p>\n<p>Alright then, let’s see if we can do better with <code class=\"language-text\">AnimatedPositioned</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ParentWidget</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StatelessWidget</span> <span class=\"token punctuation\">{</span>\n\n  double loadingWidgetHeight <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n  double hiddenOvershoot <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  Widget <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>BuildContext context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Size screenSize <span class=\"token operator\">=</span> MediaQuery<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">StreamBuilder</span><span class=\"token punctuation\">(</span>\n      stream<span class=\"token punctuation\">:</span> _dataStream<span class=\"token punctuation\">,</span>\n      builder<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> snapshot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>Widget<span class=\"token operator\">></span><span class=\"token punctuation\">[</span>\n          <span class=\"token function\">DataWidget</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">:</span> snapshot<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function\">AnimatedPositioned</span><span class=\"token punctuation\">(</span>\n            top<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            right<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            left<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            bottom<span class=\"token punctuation\">:</span> snapshot<span class=\"token punctuation\">.</span>hasData\n              <span class=\"token operator\">?</span> screenSize<span class=\"token punctuation\">.</span>height <span class=\"token operator\">+</span> hiddenOvershoot\n              <span class=\"token punctuation\">:</span> screenSize<span class=\"token punctuation\">.</span>height <span class=\"token operator\">-</span> loadingWidgetHeight<span class=\"token punctuation\">,</span>\n            child<span class=\"token punctuation\">:</span> <span class=\"token function\">LoadingWidget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Not too bad, and certainly not the only way to achieve this effect with <code class=\"language-text\">AnimatedPositioned</code>, but there are still some drawbacks. First, the <code class=\"language-text\">AnimatedPositioned</code> widget MUST be a child of a <code class=\"language-text\">Stack</code>. Second, we lose the handy <code class=\"language-text\">Offset</code> parameter that makes the <code class=\"language-text\">SlideTransition</code> so easy to use. We have to work with the screensize and an explicit container size in order to know where we should tell the <code class=\"language-text\">AnimatedPositioned</code> widget to put itself.</p>\n<h3 id=\"lets-build-a-widget-to-make-this-easy\"><a href=\"#lets-build-a-widget-to-make-this-easy\" aria-label=\"lets build a widget to make this easy permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Let’s build a widget to make this easy</h3>\n<p>Now we’ll flesh out the example at the very top of this article and turn it into a reusable widget that will animate it’s child with a <code class=\"language-text\">SlideTransition</code> based on a <code class=\"language-text\">visible</code> property. We’ll also go ahead and give the widget some properties to pass into it’s animation so that we can get some more fine grained control of the animation if we want.</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SlideVisible</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StatefulWidget</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">///Whether or not this widget should be shown.</span>\n  <span class=\"token keyword\">final</span> bool visible<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">///The widget that is shown or hidden by this widget.</span>\n  <span class=\"token keyword\">final</span> Widget child<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">///The Offset of this widget when visible is false.</span>\n  <span class=\"token comment\">///</span>\n  <span class=\"token comment\">///Defaults to Offset(0, -1.1), which will slide the widget up by</span>\n  <span class=\"token comment\">///slightly more than its height when the widget is hidden.</span>\n  <span class=\"token keyword\">final</span> Offset hiddenOffset<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">///The [Offset] of this widget when [visible] is true.</span>\n  <span class=\"token comment\">///</span>\n  <span class=\"token comment\">///Defaults to Offset(0,0).</span>\n  <span class=\"token keyword\">final</span> Offset visibleOffset<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">///The [Duration] of the slide animation.</span>\n  <span class=\"token comment\">///</span>\n  <span class=\"token comment\">///Defaults to 300ms.</span>\n  <span class=\"token keyword\">final</span> Duration duration<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">///The [Curve] that the slide animation will follow.</span>\n  <span class=\"token comment\">///</span>\n  <span class=\"token comment\">///Defaults to [Curves.linear]</span>\n  <span class=\"token keyword\">final</span> Curve curve<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">SlideVisible</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    Key key<span class=\"token punctuation\">,</span>\n    <span class=\"token metadata symbol\">@required</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>visible<span class=\"token punctuation\">,</span>\n    <span class=\"token metadata symbol\">@required</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hiddenOffset <span class=\"token operator\">=</span> <span class=\"token keyword\">const</span> <span class=\"token function\">Offset</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>visibleOffset <span class=\"token operator\">=</span> <span class=\"token keyword\">const</span> <span class=\"token function\">Offset</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>duration <span class=\"token operator\">=</span> <span class=\"token keyword\">const</span> <span class=\"token function\">Duration</span><span class=\"token punctuation\">(</span>milliseconds<span class=\"token punctuation\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>curve <span class=\"token operator\">=</span> Curves<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  _SlideVisibleState <span class=\"token function\">createState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">_SlideVisibleState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_SlideVisibleState</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">State</span><span class=\"token operator\">&lt;</span>SlideVisible<span class=\"token operator\">></span>\n    <span class=\"token keyword\">with</span> SingleTickerProviderStateMixin <span class=\"token punctuation\">{</span>\n  AnimationController _controller<span class=\"token punctuation\">;</span>\n  Animation _slideAnimation<span class=\"token punctuation\">;</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">initState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">initState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    _controller <span class=\"token operator\">=</span> <span class=\"token function\">AnimationController</span><span class=\"token punctuation\">(</span>vsync<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> duration<span class=\"token punctuation\">:</span> widget<span class=\"token punctuation\">.</span>duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    _slideAnimation <span class=\"token operator\">=</span>\n        Tween<span class=\"token operator\">&lt;</span>Offset<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">:</span> widget<span class=\"token punctuation\">.</span>hiddenOffset<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">:</span> widget<span class=\"token punctuation\">.</span>visibleOffset<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token function\">CurvedAnimation</span><span class=\"token punctuation\">(</span>\n      curve<span class=\"token punctuation\">:</span> widget<span class=\"token punctuation\">.</span>curve<span class=\"token punctuation\">,</span>\n      parent<span class=\"token punctuation\">:</span> _controller<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//Ensure that the animation will not play if the widget starts as visible.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>widget<span class=\"token punctuation\">.</span>visible<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      _controller<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> _controller<span class=\"token punctuation\">.</span>upperBound<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">didUpdateWidget</span><span class=\"token punctuation\">(</span>SlideVisible oldWidget<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">didUpdateWidget</span><span class=\"token punctuation\">(</span>oldWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>widget<span class=\"token punctuation\">.</span>visible <span class=\"token operator\">!=</span> oldWidget<span class=\"token punctuation\">.</span>visible<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>widget<span class=\"token punctuation\">.</span>visible<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        _controller<span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        _controller<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  Widget <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>BuildContext context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">SlideTransition</span><span class=\"token punctuation\">(</span>\n      position<span class=\"token punctuation\">:</span> _slideAnimation<span class=\"token punctuation\">,</span>\n      child<span class=\"token punctuation\">:</span> widget<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"using-our-new-widget\"><a href=\"#using-our-new-widget\" aria-label=\"using our new widget permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using our new widget</h3>\n<p>Now we will use <code class=\"language-text\">SlideVisible</code> from the above example to accomplish the same goal as the rest of the examples from this article.</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ParentWidget</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StatlessWidget</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token metadata symbol\">@override</span>\n  Widget <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>BuildContext context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">StreamBuilder</span><span class=\"token punctuation\">(</span>\n      stream<span class=\"token punctuation\">:</span> _dataStream<span class=\"token punctuation\">,</span>\n      builder<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> snapshot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>Widget<span class=\"token operator\">></span><span class=\"token punctuation\">[</span>\n          <span class=\"token function\">DataWidget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function\">Align</span><span class=\"token punctuation\">(</span>\n            alignment<span class=\"token punctuation\">:</span> Alignment<span class=\"token punctuation\">.</span>topCenter<span class=\"token punctuation\">,</span>\n            child<span class=\"token punctuation\">:</span> <span class=\"token function\">SlideVisible</span><span class=\"token punctuation\">(</span>\n              visible<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span>snapshot<span class=\"token punctuation\">.</span>hasData<span class=\"token punctuation\">,</span>\n              hiddenOffset<span class=\"token punctuation\">:</span> <span class=\"token keyword\">const</span> <span class=\"token function\">Offset</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n              child<span class=\"token punctuation\">:</span> <span class=\"token function\">LoadingWidget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Everything about the widget and the animation is contained in one place, and all we have to do is tell it whether or not it should currently be <code class=\"language-text\">visible</code>. We can change the <code class=\"language-text\">hiddenOffset</code> to control the direction from which it enters and exits the screen, and we don’t have to worry too much about the size of the widget itself, or mess around with <code class=\"language-text\">AnimationControllers</code> to get them to agree with our state.</p>\n<p>Optionally we can pass in a <code class=\"language-text\">Duration</code> and/or a <code class=\"language-text\">Curve</code> for finer control of the animation, and this information is situated within the widget declaration, rather than in the <code class=\"language-text\">initState</code> method elsewhere in the parent widget class.</p>\n<p>That’s all there is to it. Of course there are more animation options in Flutter than have been discussed here. I haven’t even mentioned <code class=\"language-text\">AnimatedBuilder</code> or <code class=\"language-text\">AnimatedWidget</code>, either of which might be used to achieve similar effects, that’s a topic for a later date.</p>","frontmatter":{"title":"Declarative Animation in Flutter","date":"July 25, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/flutter-declarative-animation/","previous":null,"next":{"fields":{"slug":"/deploying-gatsby/"},"frontmatter":{"tags":["gatsby","github"],"title":"Deploying a Gatsby project to Github Pages"}}}}}